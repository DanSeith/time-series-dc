{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import numpy as np\n",
    "import pickle\n",
    "import json\n",
    "import scipy\n",
    "import matplotlib.pyplot as plt\n",
    "import shutil\n",
    "from skimage.measure import regionprops\n",
    "import cv2 as cv\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import datasets, layers, models\n",
    "from tensorflow.keras.layers import TimeDistributed\n",
    "from datetime import datetime\n",
    "import sys\n",
    "import string\n",
    "from PIL import Image\n",
    "from scipy import signal\n",
    "from scipy.interpolate import interp1d\n",
    "from skimage import measure\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "from itertools import compress\n",
    "import sklearn\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.datasets import make_classification\n",
    "from tensorflow.keras import layers\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.datasets import make_classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.load('x_data_ellipse2.npy')\n",
    "y = np.load('y_data_ellipse2.npy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "lstm_x_train, lstm_x_val, lstm_y_train, lstm_y_val = train_test_split(x, y, test_size=0.3, random_state=123)\n",
    "lstm_x_val, lstm_x_test, lstm_y_val, lstm_y_test = train_test_split(lstm_x_val, lstm_y_val, test_size=0.5, random_state=321)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(966, 40, 90, 90, 2)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lstm_x_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# in_shape = lstm_x_train.shape[1:]\n",
    "in_shape = (40, 90, 90, 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Findings:\n",
    "- Dense layers are shit\n",
    "- Kinda need 3 conv layers\n",
    "- Pretty sure 1 LSTM layer\n",
    "- Ellipse helps\n",
    "\n",
    "## Want to try:\n",
    "- 2 CNN 2 LSTM\n",
    "    - Filter sizes [2, 4, 8]\n",
    "- 3 CNN 2 LSTM\n",
    "    - Filter sizes [2, 4, 8:88]\n",
    "- 3 CNN 2 LSTM\n",
    "    - Filter sizes [2, 4, 8:89]\n",
    "- 3 CNN 1 LSTM\n",
    "    - Filter size 4-8-16:89\n",
    "- 4 CNN 1 LSTM\n",
    "    - Filter sizes 8-16-32-64:88\n",
    "    - Filter sizes 2-4-8-16:86\n",
    "    \n",
    "- 4 CNN 1 LSTM no strides"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Architectures with ellipse+raw data\n",
    "- 4 CNN 1 LSTM\n",
    "    - Filter sizes 8 16 16 32 Dropout:0.3, 0.5 93%\n",
    "    - Filter sizes 8 16 16 32 Dropout:0.4, 0.4 92%\n",
    "    - Filter sizes 8 16 16 32 Dropout:0.4, 0.5 93%\n",
    "    - Filter sizes 8 16 16 32 Dropout:0.45, 0.5 92%\n",
    "- 3 CNN 1 LSTM\n",
    "    - Filter sizes 8 16 16 Dropout:0.3, 0.5 94%\n",
    "- 3 CNN 2 LSTM\n",
    "    - Filter sizes 8 16 16 Dropout:0.3, 0.5 94%\n",
    "    - Filter sizes 8 16 16 Dropout:0.4, 0.5 95%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Architectures with *new* ellipse+raw data\n",
    "- 3 CNN 3 LSTM\n",
    "    - Filter sizes 8 16 16 Dropout:0.3, 0.5 94%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.keras.backend.clear_session()\n",
    "def create_model(in_shape):\n",
    "    model = models.Sequential()\n",
    "    model.add(\n",
    "        TimeDistributed(\n",
    "            layers.Conv2D(8, (3, 3), activation='relu'), \n",
    "            input_shape=in_shape\n",
    "        )\n",
    "    ) # Add in position scalar\n",
    "    model.add(TimeDistributed(layers.MaxPooling2D((2, 2))))\n",
    "\n",
    "    model.add(TimeDistributed(layers.Conv2D(16, (3,3), activation='relu')))\n",
    "    model.add(TimeDistributed(layers.MaxPooling2D((2, 2), strides=(2, 2))))\n",
    "\n",
    "    model.add(TimeDistributed(layers.Conv2D(16, (3,3), activation='relu')))\n",
    "    model.add(TimeDistributed(layers.MaxPooling2D((2, 2), strides=(2, 2))))\n",
    "\n",
    "    # model.add(TimeDistributed(layers.Conv2D(32, (3,3), activation='relu')))\n",
    "    # model.add(TimeDistributed(layers.MaxPooling2D((2, 2), strides=(2, 2))))\n",
    "\n",
    "    # model.add(TimeDistributed(layers.Conv2D(64, (4,4), activation='relu')))\n",
    "    # model.add(TimeDistributed(layers.MaxPooling2D((2, 2), strides=(2, 2))))\n",
    "\n",
    "    # extract features and dropout \n",
    "    model.add(TimeDistributed(layers.Flatten()))\n",
    "    model.add(layers.Dropout(0.4))\n",
    "\n",
    "    # input to LSTM\n",
    "#     model.add(layers.LSTM(in_shape[0], return_sequences=True, dropout=0.5))\n",
    "    model.add(layers.LSTM(in_shape[0], return_sequences=True, dropout=0.5))\n",
    "    model.add(layers.LSTM(in_shape[0], return_sequences=False, dropout=0.5))\n",
    "    # model.add(layers.Dense(16, activation='relu'))\n",
    "    # model.add(layers.Dense(8, activation='relu'))\n",
    "    model.add(layers.Dense(1, activation='sigmoid'))\n",
    "    model.compile(optimizer='rmsprop',\n",
    "                  loss=tf.keras.losses.BinaryCrossentropy(from_logits=False),\n",
    "                 metrics=['accuracy']\n",
    "                 )\n",
    "    return model\n",
    "model = create_model(in_shape)\n",
    "checkpoint_path = \"training_1/cp-{epoch:04d}.ckpt\"\n",
    "checkpoint_dir = os.path.dirname(checkpoint_path)\n",
    "\n",
    "# Create a callback that saves the model's weights\n",
    "cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,\n",
    "                                                 save_weights_only=True,\n",
    "                                                 save_freq=1,\n",
    "                                                 verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "time_distributed (TimeDistri (None, 40, 88, 88, 8)     152       \n",
      "_________________________________________________________________\n",
      "time_distributed_1 (TimeDist (None, 40, 44, 44, 8)     0         \n",
      "_________________________________________________________________\n",
      "time_distributed_2 (TimeDist (None, 40, 42, 42, 16)    1168      \n",
      "_________________________________________________________________\n",
      "time_distributed_3 (TimeDist (None, 40, 21, 21, 16)    0         \n",
      "_________________________________________________________________\n",
      "time_distributed_4 (TimeDist (None, 40, 19, 19, 16)    2320      \n",
      "_________________________________________________________________\n",
      "time_distributed_5 (TimeDist (None, 40, 9, 9, 16)      0         \n",
      "_________________________________________________________________\n",
      "time_distributed_6 (TimeDist (None, 40, 1296)          0         \n",
      "_________________________________________________________________\n",
      "dropout (Dropout)            (None, 40, 1296)          0         \n",
      "_________________________________________________________________\n",
      "lstm (LSTM)                  (None, 40, 40)            213920    \n",
      "_________________________________________________________________\n",
      "lstm_1 (LSTM)                (None, 40)                12960     \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 1)                 41        \n",
      "=================================================================\n",
      "Total params: 230,561\n",
      "Trainable params: 230,561\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[name: \"/device:CPU:0\"\n",
       " device_type: \"CPU\"\n",
       " memory_limit: 268435456\n",
       " locality {\n",
       " }\n",
       " incarnation: 6903589235364119617,\n",
       " name: \"/device:XLA_CPU:0\"\n",
       " device_type: \"XLA_CPU\"\n",
       " memory_limit: 17179869184\n",
       " locality {\n",
       " }\n",
       " incarnation: 10712438634842352617\n",
       " physical_device_desc: \"device: XLA_CPU device\",\n",
       " name: \"/device:XLA_GPU:0\"\n",
       " device_type: \"XLA_GPU\"\n",
       " memory_limit: 17179869184\n",
       " locality {\n",
       " }\n",
       " incarnation: 17486700338036058660\n",
       " physical_device_desc: \"device: XLA_GPU device\",\n",
       " name: \"/device:GPU:0\"\n",
       " device_type: \"GPU\"\n",
       " memory_limit: 11141855360\n",
       " locality {\n",
       "   bus_id: 1\n",
       "   links {\n",
       "   }\n",
       " }\n",
       " incarnation: 3774395583868054343\n",
       " physical_device_desc: \"device: 0, name: Tesla K80, pci bus id: 0000:00:1e.0, compute capability: 3.7\"]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from tensorflow.python.client import device_lib\n",
    "device_lib.list_local_devices()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir('/home/ec2-user/SageMaker/analysis/')\n",
    "!rm -r training_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "lstm_x_train, lstm_x_val, lstm_y_train, lstm_y_val = train_test_split(x, y, test_size=0.7, random_state=123)\n",
    "# lstm_x_val, lstm_x_test, lstm_y_val, lstm_y_test = train_test_split(lstm_x_val, lstm_y_val, test_size=0.7, random_state=321)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/250\n",
      "13/13 [==============================] - 10s 776ms/step - loss: 0.6633 - accuracy: 0.5918 - val_loss: 0.7078 - val_accuracy: 0.5140\n",
      "Epoch 2/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.6116 - accuracy: 0.6739 - val_loss: 0.5742 - val_accuracy: 0.7239\n",
      "Epoch 3/250\n",
      "13/13 [==============================] - 5s 365ms/step - loss: 0.5874 - accuracy: 0.6763 - val_loss: 0.5631 - val_accuracy: 0.7301\n",
      "Epoch 4/250\n",
      "13/13 [==============================] - 5s 363ms/step - loss: 0.5796 - accuracy: 0.6739 - val_loss: 0.6293 - val_accuracy: 0.6112\n",
      "Epoch 5/250\n",
      "13/13 [==============================] - 5s 373ms/step - loss: 0.5656 - accuracy: 0.7005 - val_loss: 0.5586 - val_accuracy: 0.7373\n",
      "Epoch 6/250\n",
      "13/13 [==============================] - 5s 362ms/step - loss: 0.5592 - accuracy: 0.6812 - val_loss: 0.6802 - val_accuracy: 0.6463\n",
      "Epoch 7/250\n",
      "13/13 [==============================] - 5s 363ms/step - loss: 0.5767 - accuracy: 0.7077 - val_loss: 0.5320 - val_accuracy: 0.7291\n",
      "Epoch 8/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.5484 - accuracy: 0.7150 - val_loss: 0.5259 - val_accuracy: 0.7415\n",
      "Epoch 9/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.5632 - accuracy: 0.7077 - val_loss: 0.5811 - val_accuracy: 0.7022\n",
      "Epoch 10/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.5604 - accuracy: 0.7029 - val_loss: 0.5253 - val_accuracy: 0.7518\n",
      "Epoch 11/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.5324 - accuracy: 0.7512 - val_loss: 0.5241 - val_accuracy: 0.7342\n",
      "Epoch 12/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.5394 - accuracy: 0.7343 - val_loss: 0.5240 - val_accuracy: 0.7622\n",
      "Epoch 13/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.5508 - accuracy: 0.7029 - val_loss: 0.5701 - val_accuracy: 0.7032\n",
      "Epoch 14/250\n",
      "13/13 [==============================] - 5s 363ms/step - loss: 0.5207 - accuracy: 0.7464 - val_loss: 0.5617 - val_accuracy: 0.7094\n",
      "Epoch 15/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.5472 - accuracy: 0.7222 - val_loss: 0.5263 - val_accuracy: 0.7342\n",
      "Epoch 16/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.5428 - accuracy: 0.7222 - val_loss: 0.5398 - val_accuracy: 0.7166\n",
      "Epoch 17/250\n",
      "13/13 [==============================] - 5s 361ms/step - loss: 0.5060 - accuracy: 0.7343 - val_loss: 0.5053 - val_accuracy: 0.7746\n",
      "Epoch 18/250\n",
      "13/13 [==============================] - 5s 370ms/step - loss: 0.5122 - accuracy: 0.7440 - val_loss: 0.5115 - val_accuracy: 0.7684\n",
      "Epoch 19/250\n",
      "13/13 [==============================] - 5s 383ms/step - loss: 0.5223 - accuracy: 0.7560 - val_loss: 0.5057 - val_accuracy: 0.7756\n",
      "Epoch 20/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.5028 - accuracy: 0.7585 - val_loss: 0.5184 - val_accuracy: 0.7477\n",
      "Epoch 21/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.5195 - accuracy: 0.7681 - val_loss: 0.4984 - val_accuracy: 0.7756\n",
      "Epoch 22/250\n",
      "13/13 [==============================] - 5s 375ms/step - loss: 0.4904 - accuracy: 0.7705 - val_loss: 0.5762 - val_accuracy: 0.7115\n",
      "Epoch 23/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.4890 - accuracy: 0.7633 - val_loss: 0.4897 - val_accuracy: 0.7766\n",
      "Epoch 24/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.4931 - accuracy: 0.7512 - val_loss: 0.5505 - val_accuracy: 0.7125\n",
      "Epoch 25/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.5162 - accuracy: 0.7536 - val_loss: 0.4882 - val_accuracy: 0.7797\n",
      "Epoch 26/250\n",
      "13/13 [==============================] - 5s 365ms/step - loss: 0.4721 - accuracy: 0.7899 - val_loss: 0.4839 - val_accuracy: 0.7797\n",
      "Epoch 27/250\n",
      "13/13 [==============================] - 5s 374ms/step - loss: 0.4984 - accuracy: 0.7681 - val_loss: 0.4787 - val_accuracy: 0.7983\n",
      "Epoch 28/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.4485 - accuracy: 0.7826 - val_loss: 0.4810 - val_accuracy: 0.7859\n",
      "Epoch 29/250\n",
      "13/13 [==============================] - 5s 363ms/step - loss: 0.5052 - accuracy: 0.7657 - val_loss: 0.4725 - val_accuracy: 0.7818\n",
      "Epoch 30/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.4603 - accuracy: 0.7899 - val_loss: 0.5008 - val_accuracy: 0.7508\n",
      "Epoch 31/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.4516 - accuracy: 0.7995 - val_loss: 0.4622 - val_accuracy: 0.7901\n",
      "Epoch 32/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.4582 - accuracy: 0.7802 - val_loss: 0.4678 - val_accuracy: 0.7963\n",
      "Epoch 33/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.4437 - accuracy: 0.7850 - val_loss: 0.4690 - val_accuracy: 0.7828\n",
      "Epoch 34/250\n",
      "13/13 [==============================] - 5s 363ms/step - loss: 0.4245 - accuracy: 0.8068 - val_loss: 0.4378 - val_accuracy: 0.7932\n",
      "Epoch 35/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.4203 - accuracy: 0.8140 - val_loss: 0.4429 - val_accuracy: 0.7994\n",
      "Epoch 36/250\n",
      "13/13 [==============================] - 5s 374ms/step - loss: 0.4218 - accuracy: 0.8140 - val_loss: 0.4434 - val_accuracy: 0.8046\n",
      "Epoch 37/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.4438 - accuracy: 0.8140 - val_loss: 0.4346 - val_accuracy: 0.8149\n",
      "Epoch 38/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.3997 - accuracy: 0.8237 - val_loss: 0.4185 - val_accuracy: 0.8118\n",
      "Epoch 39/250\n",
      "13/13 [==============================] - 5s 373ms/step - loss: 0.4055 - accuracy: 0.8164 - val_loss: 0.4416 - val_accuracy: 0.7859\n",
      "Epoch 40/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.4037 - accuracy: 0.8188 - val_loss: 0.4971 - val_accuracy: 0.7952\n",
      "Epoch 41/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.3633 - accuracy: 0.8357 - val_loss: 0.4082 - val_accuracy: 0.8242\n",
      "Epoch 42/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.4075 - accuracy: 0.8188 - val_loss: 0.3998 - val_accuracy: 0.8159\n",
      "Epoch 43/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.3533 - accuracy: 0.8454 - val_loss: 0.4225 - val_accuracy: 0.8066\n",
      "Epoch 44/250\n",
      "13/13 [==============================] - 5s 375ms/step - loss: 0.3370 - accuracy: 0.8478 - val_loss: 0.4818 - val_accuracy: 0.8263\n",
      "Epoch 45/250\n",
      "13/13 [==============================] - 5s 362ms/step - loss: 0.3596 - accuracy: 0.8454 - val_loss: 0.5251 - val_accuracy: 0.8087\n",
      "Epoch 46/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.3320 - accuracy: 0.8575 - val_loss: 0.4046 - val_accuracy: 0.8087\n",
      "Epoch 47/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.3168 - accuracy: 0.8623 - val_loss: 0.3541 - val_accuracy: 0.8552\n",
      "Epoch 48/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.3177 - accuracy: 0.8623 - val_loss: 0.4417 - val_accuracy: 0.8366\n",
      "Epoch 49/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.2902 - accuracy: 0.8792 - val_loss: 0.3911 - val_accuracy: 0.8407\n",
      "Epoch 50/250\n",
      "13/13 [==============================] - 5s 365ms/step - loss: 0.2779 - accuracy: 0.8889 - val_loss: 0.3345 - val_accuracy: 0.8625\n",
      "Epoch 51/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.3223 - accuracy: 0.8502 - val_loss: 0.3693 - val_accuracy: 0.8294\n",
      "Epoch 52/250\n",
      "13/13 [==============================] - 5s 363ms/step - loss: 0.2832 - accuracy: 0.8720 - val_loss: 0.4876 - val_accuracy: 0.8066\n",
      "Epoch 53/250\n",
      "13/13 [==============================] - 5s 370ms/step - loss: 0.3190 - accuracy: 0.8696 - val_loss: 0.3480 - val_accuracy: 0.8614\n",
      "Epoch 54/250\n",
      "13/13 [==============================] - 5s 361ms/step - loss: 0.2767 - accuracy: 0.8671 - val_loss: 0.3016 - val_accuracy: 0.8790\n",
      "Epoch 55/250\n",
      "13/13 [==============================] - 5s 370ms/step - loss: 0.2726 - accuracy: 0.8696 - val_loss: 0.3079 - val_accuracy: 0.8676\n",
      "Epoch 56/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.2558 - accuracy: 0.8865 - val_loss: 0.4612 - val_accuracy: 0.8211\n",
      "Epoch 57/250\n",
      "13/13 [==============================] - 5s 365ms/step - loss: 0.2399 - accuracy: 0.8913 - val_loss: 0.3704 - val_accuracy: 0.8573\n",
      "Epoch 58/250\n",
      "13/13 [==============================] - 5s 381ms/step - loss: 0.2223 - accuracy: 0.8986 - val_loss: 0.6195 - val_accuracy: 0.7797\n",
      "Epoch 59/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.2604 - accuracy: 0.9010 - val_loss: 0.2936 - val_accuracy: 0.8862\n",
      "Epoch 60/250\n",
      "13/13 [==============================] - 5s 372ms/step - loss: 0.2386 - accuracy: 0.9010 - val_loss: 0.2952 - val_accuracy: 0.8790\n",
      "Epoch 61/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.1926 - accuracy: 0.9300 - val_loss: 0.6004 - val_accuracy: 0.7725\n",
      "Epoch 62/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.2225 - accuracy: 0.9130 - val_loss: 0.3357 - val_accuracy: 0.8831\n",
      "Epoch 63/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.2005 - accuracy: 0.9155 - val_loss: 0.2628 - val_accuracy: 0.8945\n",
      "Epoch 64/250\n",
      "13/13 [==============================] - 5s 365ms/step - loss: 0.2052 - accuracy: 0.9203 - val_loss: 0.2865 - val_accuracy: 0.8821\n",
      "Epoch 65/250\n",
      "13/13 [==============================] - 5s 371ms/step - loss: 0.2282 - accuracy: 0.8986 - val_loss: 0.3917 - val_accuracy: 0.8480\n",
      "Epoch 66/250\n",
      "13/13 [==============================] - 5s 362ms/step - loss: 0.1992 - accuracy: 0.9251 - val_loss: 0.3281 - val_accuracy: 0.8707\n",
      "Epoch 67/250\n",
      "13/13 [==============================] - 5s 381ms/step - loss: 0.2289 - accuracy: 0.9058 - val_loss: 0.2587 - val_accuracy: 0.8997\n",
      "Epoch 68/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.1682 - accuracy: 0.9517 - val_loss: 0.2778 - val_accuracy: 0.9028\n",
      "Epoch 69/250\n",
      "13/13 [==============================] - 5s 365ms/step - loss: 0.1782 - accuracy: 0.9348 - val_loss: 0.3098 - val_accuracy: 0.8697\n",
      "Epoch 70/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.1606 - accuracy: 0.9227 - val_loss: 0.2760 - val_accuracy: 0.9018\n",
      "Epoch 71/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.1939 - accuracy: 0.9155 - val_loss: 0.3346 - val_accuracy: 0.8780\n",
      "Epoch 72/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.1504 - accuracy: 0.9420 - val_loss: 0.3437 - val_accuracy: 0.8842\n",
      "Epoch 73/250\n",
      "13/13 [==============================] - 5s 381ms/step - loss: 0.1556 - accuracy: 0.9444 - val_loss: 0.2986 - val_accuracy: 0.8956\n",
      "Epoch 74/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.1436 - accuracy: 0.9493 - val_loss: 0.3322 - val_accuracy: 0.8635\n",
      "Epoch 75/250\n",
      "13/13 [==============================] - 5s 361ms/step - loss: 0.1408 - accuracy: 0.9493 - val_loss: 0.3272 - val_accuracy: 0.8873\n",
      "Epoch 76/250\n",
      "13/13 [==============================] - 5s 374ms/step - loss: 0.1496 - accuracy: 0.9469 - val_loss: 0.2864 - val_accuracy: 0.8925\n",
      "Epoch 77/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.1372 - accuracy: 0.9517 - val_loss: 0.3688 - val_accuracy: 0.8583\n",
      "Epoch 78/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.1798 - accuracy: 0.9300 - val_loss: 0.3243 - val_accuracy: 0.8925\n",
      "Epoch 79/250\n",
      "13/13 [==============================] - 5s 375ms/step - loss: 0.1631 - accuracy: 0.9420 - val_loss: 0.3154 - val_accuracy: 0.8831\n",
      "Epoch 80/250\n",
      "13/13 [==============================] - 5s 370ms/step - loss: 0.1130 - accuracy: 0.9614 - val_loss: 0.3251 - val_accuracy: 0.8976\n",
      "Epoch 81/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.1657 - accuracy: 0.9493 - val_loss: 0.3583 - val_accuracy: 0.8614\n",
      "Epoch 82/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.1512 - accuracy: 0.9493 - val_loss: 0.3406 - val_accuracy: 0.8945\n",
      "Epoch 83/250\n",
      "13/13 [==============================] - 5s 371ms/step - loss: 0.1355 - accuracy: 0.9444 - val_loss: 0.2883 - val_accuracy: 0.9069\n",
      "Epoch 84/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.0921 - accuracy: 0.9734 - val_loss: 0.3108 - val_accuracy: 0.9038\n",
      "Epoch 85/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.1379 - accuracy: 0.9517 - val_loss: 0.2935 - val_accuracy: 0.9028\n",
      "Epoch 86/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.1233 - accuracy: 0.9517 - val_loss: 0.3497 - val_accuracy: 0.8759\n",
      "Epoch 87/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.1567 - accuracy: 0.9420 - val_loss: 0.3198 - val_accuracy: 0.8831\n",
      "Epoch 88/250\n",
      "13/13 [==============================] - 5s 375ms/step - loss: 0.0979 - accuracy: 0.9614 - val_loss: 0.3085 - val_accuracy: 0.9038\n",
      "Epoch 89/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.0864 - accuracy: 0.9686 - val_loss: 0.3381 - val_accuracy: 0.9018\n",
      "Epoch 90/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.1650 - accuracy: 0.9300 - val_loss: 0.2940 - val_accuracy: 0.8956\n",
      "Epoch 91/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.1165 - accuracy: 0.9541 - val_loss: 0.3581 - val_accuracy: 0.8935\n",
      "Epoch 92/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.1139 - accuracy: 0.9589 - val_loss: 0.2740 - val_accuracy: 0.9080\n",
      "Epoch 93/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.1321 - accuracy: 0.9493 - val_loss: 0.3084 - val_accuracy: 0.9038\n",
      "Epoch 94/250\n",
      "13/13 [==============================] - 5s 388ms/step - loss: 0.0947 - accuracy: 0.9686 - val_loss: 0.4157 - val_accuracy: 0.8780\n",
      "Epoch 95/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.1166 - accuracy: 0.9541 - val_loss: 0.2898 - val_accuracy: 0.9090\n",
      "Epoch 96/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.0908 - accuracy: 0.9638 - val_loss: 0.2801 - val_accuracy: 0.9090\n",
      "Epoch 97/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.1356 - accuracy: 0.9493 - val_loss: 0.3627 - val_accuracy: 0.8842\n",
      "Epoch 98/250\n",
      "13/13 [==============================] - 5s 370ms/step - loss: 0.0745 - accuracy: 0.9710 - val_loss: 0.3266 - val_accuracy: 0.9038\n",
      "Epoch 99/250\n",
      "13/13 [==============================] - 5s 374ms/step - loss: 0.0698 - accuracy: 0.9831 - val_loss: 0.4185 - val_accuracy: 0.8800\n",
      "Epoch 100/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.1521 - accuracy: 0.9541 - val_loss: 0.3861 - val_accuracy: 0.8718\n",
      "Epoch 101/250\n",
      "13/13 [==============================] - 5s 365ms/step - loss: 0.0674 - accuracy: 0.9783 - val_loss: 0.2624 - val_accuracy: 0.9121\n",
      "Epoch 102/250\n",
      "13/13 [==============================] - 5s 370ms/step - loss: 0.1024 - accuracy: 0.9589 - val_loss: 0.2994 - val_accuracy: 0.9028\n",
      "Epoch 103/250\n",
      "13/13 [==============================] - 5s 375ms/step - loss: 0.0878 - accuracy: 0.9686 - val_loss: 0.2914 - val_accuracy: 0.9131\n",
      "Epoch 104/250\n",
      "13/13 [==============================] - 5s 361ms/step - loss: 0.1064 - accuracy: 0.9662 - val_loss: 0.3704 - val_accuracy: 0.8935\n",
      "Epoch 105/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.0815 - accuracy: 0.9734 - val_loss: 0.3095 - val_accuracy: 0.9028\n",
      "Epoch 106/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.0542 - accuracy: 0.9783 - val_loss: 0.4164 - val_accuracy: 0.8904\n",
      "Epoch 107/250\n",
      "13/13 [==============================] - 5s 365ms/step - loss: 0.1369 - accuracy: 0.9541 - val_loss: 0.2701 - val_accuracy: 0.9090\n",
      "Epoch 108/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.0562 - accuracy: 0.9758 - val_loss: 0.3539 - val_accuracy: 0.8966\n",
      "Epoch 109/250\n",
      "13/13 [==============================] - 5s 365ms/step - loss: 0.0409 - accuracy: 0.9831 - val_loss: 0.3159 - val_accuracy: 0.9080\n",
      "Epoch 110/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.0978 - accuracy: 0.9565 - val_loss: 0.3158 - val_accuracy: 0.9007\n",
      "Epoch 111/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.0308 - accuracy: 0.9928 - val_loss: 0.3033 - val_accuracy: 0.9152\n",
      "Epoch 112/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.0963 - accuracy: 0.9638 - val_loss: 0.4624 - val_accuracy: 0.8759\n",
      "Epoch 113/250\n",
      "13/13 [==============================] - 5s 376ms/step - loss: 0.0697 - accuracy: 0.9734 - val_loss: 0.4101 - val_accuracy: 0.8821\n",
      "Epoch 114/250\n",
      "13/13 [==============================] - 5s 363ms/step - loss: 0.1090 - accuracy: 0.9710 - val_loss: 0.3208 - val_accuracy: 0.8956\n",
      "Epoch 115/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.0503 - accuracy: 0.9807 - val_loss: 0.3212 - val_accuracy: 0.9121\n",
      "Epoch 116/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.0698 - accuracy: 0.9710 - val_loss: 0.3260 - val_accuracy: 0.9100\n",
      "Epoch 117/250\n",
      "13/13 [==============================] - 5s 380ms/step - loss: 0.0709 - accuracy: 0.9686 - val_loss: 0.3489 - val_accuracy: 0.8987\n",
      "Epoch 118/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.0594 - accuracy: 0.9807 - val_loss: 0.3886 - val_accuracy: 0.8821\n",
      "Epoch 119/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.0759 - accuracy: 0.9662 - val_loss: 0.3361 - val_accuracy: 0.8935\n",
      "Epoch 120/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.0337 - accuracy: 0.9903 - val_loss: 0.5412 - val_accuracy: 0.8521\n",
      "Epoch 121/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.0885 - accuracy: 0.9662 - val_loss: 0.3836 - val_accuracy: 0.8873\n",
      "Epoch 122/250\n",
      "13/13 [==============================] - 5s 375ms/step - loss: 0.0324 - accuracy: 0.9831 - val_loss: 0.3437 - val_accuracy: 0.9080\n",
      "Epoch 123/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.0691 - accuracy: 0.9710 - val_loss: 0.6566 - val_accuracy: 0.8366\n",
      "Epoch 124/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.0464 - accuracy: 0.9783 - val_loss: 0.3475 - val_accuracy: 0.9080\n",
      "Epoch 125/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.0288 - accuracy: 0.9903 - val_loss: 0.3758 - val_accuracy: 0.9059\n",
      "Epoch 126/250\n",
      "13/13 [==============================] - 5s 371ms/step - loss: 0.0940 - accuracy: 0.9541 - val_loss: 0.2949 - val_accuracy: 0.9162\n",
      "Epoch 127/250\n",
      "13/13 [==============================] - 5s 375ms/step - loss: 0.0473 - accuracy: 0.9855 - val_loss: 0.2964 - val_accuracy: 0.9193\n",
      "Epoch 128/250\n",
      "13/13 [==============================] - 5s 362ms/step - loss: 0.0416 - accuracy: 0.9855 - val_loss: 0.6378 - val_accuracy: 0.8428\n",
      "Epoch 129/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.0679 - accuracy: 0.9734 - val_loss: 0.4093 - val_accuracy: 0.8769\n",
      "Epoch 130/250\n",
      "13/13 [==============================] - 5s 378ms/step - loss: 0.0607 - accuracy: 0.9783 - val_loss: 0.2942 - val_accuracy: 0.9224\n",
      "Epoch 131/250\n",
      "13/13 [==============================] - 5s 370ms/step - loss: 0.0184 - accuracy: 0.9928 - val_loss: 0.3297 - val_accuracy: 0.9152\n",
      "Epoch 132/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.0586 - accuracy: 0.9783 - val_loss: 0.3292 - val_accuracy: 0.9111\n",
      "Epoch 133/250\n",
      "13/13 [==============================] - 5s 368ms/step - loss: 0.0392 - accuracy: 0.9831 - val_loss: 0.3585 - val_accuracy: 0.9090\n",
      "Epoch 134/250\n",
      "13/13 [==============================] - 5s 363ms/step - loss: 0.0885 - accuracy: 0.9662 - val_loss: 0.4010 - val_accuracy: 0.8852\n",
      "Epoch 135/250\n",
      "13/13 [==============================] - 5s 374ms/step - loss: 0.0388 - accuracy: 0.9855 - val_loss: 0.3662 - val_accuracy: 0.9038\n",
      "Epoch 136/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.0335 - accuracy: 0.9903 - val_loss: 0.3439 - val_accuracy: 0.9131\n",
      "Epoch 137/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.0444 - accuracy: 0.9807 - val_loss: 0.6551 - val_accuracy: 0.8594\n",
      "Epoch 138/250\n",
      "13/13 [==============================] - 5s 373ms/step - loss: 0.0406 - accuracy: 0.9831 - val_loss: 0.3754 - val_accuracy: 0.9028\n",
      "Epoch 139/250\n",
      "13/13 [==============================] - 5s 370ms/step - loss: 0.0789 - accuracy: 0.9734 - val_loss: 0.3599 - val_accuracy: 0.9204\n",
      "Epoch 140/250\n",
      "13/13 [==============================] - 5s 371ms/step - loss: 0.0476 - accuracy: 0.9831 - val_loss: 0.3600 - val_accuracy: 0.9100\n",
      "Epoch 141/250\n",
      "13/13 [==============================] - 5s 362ms/step - loss: 0.0737 - accuracy: 0.9710 - val_loss: 0.3120 - val_accuracy: 0.9193\n",
      "Epoch 142/250\n",
      "13/13 [==============================] - 5s 361ms/step - loss: 0.0112 - accuracy: 1.0000 - val_loss: 0.3533 - val_accuracy: 0.9069\n",
      "Epoch 143/250\n",
      "13/13 [==============================] - 5s 375ms/step - loss: 0.0186 - accuracy: 0.9928 - val_loss: 0.4017 - val_accuracy: 0.9007\n",
      "Epoch 144/250\n",
      "13/13 [==============================] - 5s 380ms/step - loss: 0.0829 - accuracy: 0.9758 - val_loss: 0.5189 - val_accuracy: 0.8697\n",
      "Epoch 145/250\n",
      "13/13 [==============================] - 5s 363ms/step - loss: 0.0445 - accuracy: 0.9831 - val_loss: 0.3012 - val_accuracy: 0.9307\n",
      "Epoch 146/250\n",
      "13/13 [==============================] - 5s 362ms/step - loss: 0.0081 - accuracy: 1.0000 - val_loss: 0.3059 - val_accuracy: 0.9266\n",
      "Epoch 147/250\n",
      "13/13 [==============================] - 5s 366ms/step - loss: 0.0224 - accuracy: 0.9928 - val_loss: 0.4147 - val_accuracy: 0.9090\n",
      "Epoch 148/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.0757 - accuracy: 0.9734 - val_loss: 0.8164 - val_accuracy: 0.8232\n",
      "Epoch 149/250\n",
      "13/13 [==============================] - 5s 369ms/step - loss: 0.0310 - accuracy: 0.9879 - val_loss: 0.3745 - val_accuracy: 0.9100\n",
      "Epoch 150/250\n",
      "13/13 [==============================] - 5s 367ms/step - loss: 0.0155 - accuracy: 0.9928 - val_loss: 0.4295 - val_accuracy: 0.9018\n",
      "Epoch 151/250\n",
      "13/13 [==============================] - 5s 370ms/step - loss: 0.1419 - accuracy: 0.9614 - val_loss: 0.3507 - val_accuracy: 0.9111\n",
      "Epoch 152/250\n",
      "13/13 [==============================] - 5s 364ms/step - loss: 0.0196 - accuracy: 0.9952 - val_loss: 0.3324 - val_accuracy: 0.9183\n",
      "Epoch 153/250\n",
      "13/13 [==============================] - 5s 379ms/step - loss: 0.0089 - accuracy: 0.9976 - val_loss: 0.8024 - val_accuracy: 0.8304\n",
      "Epoch 154/250\n",
      "13/13 [==============================] - ETA: 0s - loss: 0.0485 - accuracy: 0.9807"
     ]
    }
   ],
   "source": [
    "with tf.device('/device:GPU:0'):\n",
    "    lstm_history = model.fit(lstm_x_train, lstm_y_train, epochs=250,\n",
    "                        validation_data=(lstm_x_val, lstm_y_val),\n",
    "                             verbose=1,\n",
    "              callbacks=[cp_callback]\n",
    "                            )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "30% Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# RMSPROP\n",
    "plt.plot(lstm_history.history['accuracy'], label='accuracy')\n",
    "plt.plot(lstm_history.history['val_accuracy'], label = 'val_accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.ylim([0.5, 1])\n",
    "plt.legend(loc='lower right')\n",
    "# plt.figure(figsize=(12,16))\n",
    "# plt.savefig('lstm_training.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(np.max(lstm_history.history['val_accuracy']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "50% Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# RMSPROP\n",
    "plt.plot(lstm_history.history['accuracy'], label='accuracy')\n",
    "plt.plot(lstm_history.history['val_accuracy'], label = 'val_accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.ylim([0.5, 1])\n",
    "plt.legend(loc='lower right')\n",
    "# plt.figure(figsize=(12,16))\n",
    "# plt.savefig('lstm_training.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9348769783973694\n"
     ]
    }
   ],
   "source": [
    "print(np.max(lstm_history.history['val_accuracy']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "60% Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# RMSPROP\n",
    "plt.plot(lstm_history.history['accuracy'], label='accuracy')\n",
    "plt.plot(lstm_history.history['val_accuracy'], label = 'val_accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.ylim([0.5, 1])\n",
    "plt.legend(loc='lower right')\n",
    "# plt.figure(figsize=(12,16))\n",
    "# plt.savefig('lstm_training.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.93333334\n"
     ]
    }
   ],
   "source": [
    "print(np.max(lstm_history.history['val_accuracy']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "70% Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.942029\n"
     ]
    }
   ],
   "source": [
    "print(np.max(lstm_history.history['val_accuracy']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9371980428695679\n"
     ]
    }
   ],
   "source": [
    "print(np.max(lstm_history.history['val_accuracy']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9238578677177429\n"
     ]
    }
   ],
   "source": [
    "print(np.max(lstm_history.history['val_accuracy']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9516129\n"
     ]
    }
   ],
   "source": [
    "print(np.max(lstm_history.history['val_accuracy']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir('training_1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 1s 108ms/step - loss: 0.5340 - accuracy: 0.7548\n",
      "7/7 [==============================] - 0s 59ms/step - loss: 0.5329 - accuracy: 0.7692\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.5865 - accuracy: 0.6827\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.5182 - accuracy: 0.7212\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.5621 - accuracy: 0.6827\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.4672 - accuracy: 0.7933\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.6391 - accuracy: 0.6875\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.4691 - accuracy: 0.7981\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.4613 - accuracy: 0.7644\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.5427 - accuracy: 0.7212\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.5128 - accuracy: 0.7452\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.4207 - accuracy: 0.8125\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.5474 - accuracy: 0.7163\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.5218 - accuracy: 0.7548\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3596 - accuracy: 0.8702\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3538 - accuracy: 0.8750\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.4562 - accuracy: 0.7788\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.9037 - accuracy: 0.5721\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.5470 - accuracy: 0.7500\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3005 - accuracy: 0.8990\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2766 - accuracy: 0.8942\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.4371 - accuracy: 0.7837\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3090 - accuracy: 0.8654\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3708 - accuracy: 0.8510\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3806 - accuracy: 0.8317\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3806 - accuracy: 0.8558\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2925 - accuracy: 0.8894\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2342 - accuracy: 0.9183\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.6456 - accuracy: 0.7644\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2119 - accuracy: 0.9183\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2189 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2411 - accuracy: 0.9231\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2243 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2027 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3177 - accuracy: 0.8846\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2881 - accuracy: 0.8798\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2106 - accuracy: 0.9183\n",
      "7/7 [==============================] - 0s 53ms/step - loss: 0.2250 - accuracy: 0.9183\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2479 - accuracy: 0.9183\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2482 - accuracy: 0.9135\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2537 - accuracy: 0.8990\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.1985 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3842 - accuracy: 0.8510\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2615 - accuracy: 0.9135\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2301 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2363 - accuracy: 0.9231\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2442 - accuracy: 0.9135\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3302 - accuracy: 0.8894\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2382 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3883 - accuracy: 0.8510\n",
      "7/7 [==============================] - 0s 63ms/step - loss: 0.2810 - accuracy: 0.9087\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.4747 - accuracy: 0.8558\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.1947 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.4356 - accuracy: 0.8798\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2174 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2200 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2947 - accuracy: 0.9231\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2836 - accuracy: 0.8894\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2284 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2169 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3209 - accuracy: 0.8942\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2318 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2312 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2244 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2289 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2780 - accuracy: 0.9135\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2943 - accuracy: 0.9135\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.4043 - accuracy: 0.9038\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3084 - accuracy: 0.8942\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3895 - accuracy: 0.8894\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2328 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.4437 - accuracy: 0.8702\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2289 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2360 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.2752 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3131 - accuracy: 0.9135\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2599 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2418 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2454 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2432 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2397 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.2713 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3129 - accuracy: 0.9183\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2770 - accuracy: 0.9038\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.7327 - accuracy: 0.8317\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.4506 - accuracy: 0.9038\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2413 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2719 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2909 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3404 - accuracy: 0.9231\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.2300 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3014 - accuracy: 0.9183\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2697 - accuracy: 0.9183\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.5436 - accuracy: 0.8606\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2755 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3425 - accuracy: 0.9183\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.2815 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.2537 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3090 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 60ms/step - loss: 0.3236 - accuracy: 0.9038\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.2889 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3112 - accuracy: 0.9135\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3376 - accuracy: 0.9087\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.2280 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2656 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2532 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2780 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.2912 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3220 - accuracy: 0.9183\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.2758 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2325 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2891 - accuracy: 0.9135\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3056 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2990 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.2616 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.2954 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3447 - accuracy: 0.9038\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3297 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.5778 - accuracy: 0.8942\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.4571 - accuracy: 0.9038\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2758 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2517 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.3173 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2724 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3286 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3113 - accuracy: 0.9231\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.2821 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3304 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.2734 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.2639 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3068 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 60ms/step - loss: 0.3390 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.2792 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3487 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3295 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3314 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 59ms/step - loss: 0.4353 - accuracy: 0.9038\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3317 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.3431 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.3419 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3283 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.8656 - accuracy: 0.8510\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3137 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3364 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3176 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 59ms/step - loss: 0.3343 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3195 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.3625 - accuracy: 0.9135\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.2971 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2831 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3046 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3523 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2963 - accuracy: 0.9519\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2863 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3408 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3001 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3904 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3054 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2969 - accuracy: 0.9567\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3195 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.2926 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3358 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3587 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3497 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3578 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2931 - accuracy: 0.9519\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3455 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3887 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3209 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 53ms/step - loss: 0.4242 - accuracy: 0.9087\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3319 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3901 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 68ms/step - loss: 0.3794 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3507 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2892 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3296 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3566 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3445 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3072 - accuracy: 0.9567\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.6092 - accuracy: 0.8942\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3575 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3452 - accuracy: 0.9519\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3703 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3221 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.5470 - accuracy: 0.8942\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3440 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3246 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3043 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3314 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3390 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3269 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2913 - accuracy: 0.9519\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3044 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3070 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3701 - accuracy: 0.9231\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3348 - accuracy: 0.9519\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3356 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.2844 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.2739 - accuracy: 0.9519\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3552 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3832 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3934 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3283 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3192 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.4252 - accuracy: 0.9231\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.3334 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3659 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3656 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3096 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3312 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.4944 - accuracy: 0.9087\n",
      "7/7 [==============================] - 0s 53ms/step - loss: 0.2781 - accuracy: 0.9567\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.4133 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3148 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 58ms/step - loss: 0.4290 - accuracy: 0.9135\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3775 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3445 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3421 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 70ms/step - loss: 0.3569 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.5701 - accuracy: 0.8942\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3662 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3454 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3196 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3978 - accuracy: 0.9327\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.4065 - accuracy: 0.9231\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3466 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3529 - accuracy: 0.9567\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3572 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3952 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3351 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3234 - accuracy: 0.9519\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3637 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3458 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.7765 - accuracy: 0.8846\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3299 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3378 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3749 - accuracy: 0.9471\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.4550 - accuracy: 0.9279\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3582 - accuracy: 0.9375\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.3309 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.4573 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3924 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 54ms/step - loss: 0.3984 - accuracy: 0.9135\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3416 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 57ms/step - loss: 0.3323 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3815 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 56ms/step - loss: 0.6579 - accuracy: 0.9087\n",
      "7/7 [==============================] - 0s 55ms/step - loss: 0.3497 - accuracy: 0.9423\n",
      "7/7 [==============================] - 0s 59ms/step - loss: 0.3730 - accuracy: 0.9423\n"
     ]
    }
   ],
   "source": [
    "dif_dict = {}\n",
    "acc_list = []\n",
    "for cp in np.arange(1,250):\n",
    "    val_model = create_model(in_shape)\n",
    "    model.load_weights('cp-' + str.zfill(str(cp),4) + '.ckpt')\n",
    "    test_acc = model.evaluate(lstm_x_test, lstm_y_test)[1]\n",
    "    acc_list.append(test_acc)\n",
    "    dif_dict[cp] = test_acc-lstm_history.history['val_accuracy'][cp]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.858726490932296\n",
      "23.778337240219116\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dif_list = [dif_dict[i]*100 for i in dif_dict]\n",
    "plt.scatter(dif_dict.keys(), dif_list)\n",
    "plt.xlabel('epoch')\n",
    "plt.ylabel('percent difference')\n",
    "plt.title('Percent difference between val and test vs epoch')\n",
    "print(np.mean(dif_list))\n",
    "print(np.max(dif_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-1.9692981578260063\n",
      "19.796955585479736\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dif_list = [dif_dict[i]*100 for i in dif_dict]\n",
    "plt.scatter(dif_dict.keys(), dif_list)\n",
    "plt.xlabel('epoch')\n",
    "plt.ylabel('percent difference')\n",
    "plt.title('Percent difference between val and test vs epoch')\n",
    "print(np.mean(dif_list))\n",
    "print(np.max(dif_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-2.048312180006324\n",
      "2.0249499701681577\n"
     ]
    }
   ],
   "source": [
    "print(np.mean(dif_list[50:]))\n",
    "print(np.std(dif_list[50:]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.1401101272908887\n",
      "3.258312741442064\n"
     ]
    }
   ],
   "source": [
    "print(np.mean(dif_list[50:]))\n",
    "print(np.std(dif_list[50:]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "60"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.argmax(lstm_history.history['val_accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.897849440574646"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc_list[60]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# As val accuracy increases, does test increase?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# RMSPROP\n",
    "plt.plot(lstm_history.history['accuracy'], label='accuracy')\n",
    "plt.plot(lstm_history.history['val_accuracy'], label = 'val_accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.ylim([0.5, 1])\n",
    "plt.legend(loc='lower right')\n",
    "# plt.figure(figsize=(12,16))\n",
    "# plt.savefig('lstm_training.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# RMSPROP\n",
    "# plt.plot(lstm_history.history['accuracy'], label='accuracy')\n",
    "# plt.plot(lstm_history.history['val_accuracy'], label = 'val_accuracy')\n",
    "# plt.xlabel('Epoch')\n",
    "# plt.ylabel('Accuracy')\n",
    "# plt.ylim([0.5, 1])\n",
    "# plt.legend(loc='lower right')\n",
    "# # plt.figure(figsize=(12,16))\n",
    "# plt.savefig('lstm_training.png', dpi=300)\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lrcn/\n",
      "lrcn/saved_model.pb\n",
      "lrcn/variables/\n",
      "lrcn/variables/variables.index\n",
      "lrcn/variables/variables.data-00000-of-00001\n",
      "lrcn/assets/\n"
     ]
    }
   ],
   "source": [
    "# !tar czvf lrcn.tar.gz lrcn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /home/ec2-user/anaconda3/envs/tensorflow2_p36/lib/python3.6/site-packages/tensorflow/python/training/tracking/tracking.py:111: Model.state_updates (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "This property should not be used in TensorFlow 2.0, as updates are applied automatically.\n",
      "WARNING:tensorflow:From /home/ec2-user/anaconda3/envs/tensorflow2_p36/lib/python3.6/site-packages/tensorflow/python/training/tracking/tracking.py:111: Layer.updates (from tensorflow.python.keras.engine.base_layer) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "This property should not be used in TensorFlow 2.0, as updates are applied automatically.\n",
      "INFO:tensorflow:Assets written to: lrcn/assets\n"
     ]
    }
   ],
   "source": [
    "# model.save('lrcn')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_tensorflow2_p36",
   "language": "python",
   "name": "conda_tensorflow2_p36"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
